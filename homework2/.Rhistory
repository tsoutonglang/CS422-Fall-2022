library(ISLR)
data(Auto)
set.seed(1122)
index <- sample(1:nrow(Auto), 0.95*dim(Auto)[1])
train.df <- Auto[index,]
test.df <- Auto[-index, ]
autoModel <- lm(mpg ~ . -name, data = test.df)
summary(autoModel)
rss <- round(sum(autoModel$residuals^2), digit = 2)
# rse <- round(sqrt(mean(autoModel$residuals^2)), digit = 2)
rmse <- round(sqrt(mean(autoModel$residuals^2)), digit = 2)
rmse
str <- cat(paste0("R-sq value is 0.93\nAdjusted R-sq value is 0.92\nRSE is 2.47\nRMSE is ", rmse))
autoRes <- autoModel$residuals
plot(fitted(autoModel), autoRes, main = "2.1-a-iii Auto Model Residuals", xlab = "Model", ylab = "Residuals")
hist(autoRes, main = "2.1-a-iv Auto Module Residuals", xlab = "Residuals")
autoNewModel <- lm(mpg ~ weight + year + acceleration, data = test.df)
summary(autoNewModel)
rmse <- round(sqrt(mean(autoNewModel$residuals^2)), digits = 2)
str <- cat(paste0("R-sq value is 0.93\nRSE is 2.30\nRMSE is ", rmse))
autoNewRes <- autoNewModel$residuals
plot(fitted(autoNewModel), autoNewRes, main = "2.1-b-iii Auto Model Residuals", xlab = "Model", ylab = "Residuals")
hist(autoNewRes, main = "2.1-b-iv Auto Module Residuals", xlab = "Residuals")
library(dplyr)
df <- data.frame(
Prediction = c(predict(autoNewModel)),
Response = c(test.df %>% select(mpg))
)
dfConfidence <- df
ConfidenceInt <- predict(autoNewModel, interval = 'confidence')
my_fun <- function(x) {
if (dfConfidence[x,2] > ConfidenceInt[x, 2]) {
if (dfConfidence[x,2] < ConfidenceInt[x, 3]) {
return(1)
} # response in CI
else {
return(0)
} # response not in CI
}
else{
return(1)
} # response not in CI
}
Matches <- c(sapply(seq_len(nrow(dfConfidence)), my_fun))
dfConfidence['Lower'] <- c(ConfidenceInt[,2])
dfConfidence['Upper'] <- c(ConfidenceInt[,3])
dfConfidence['Matches'] <- Matches
dfConfidence
str <- paste0("Total observations correctly predicted: ", nrow(dfConfidence %>% filter(Matches == 1)))
str
dfPredict <- df
PredictInt <- predict(autoNewModel, interval = 'predict')
my_fun <- function(x) {
if (dfPredict[x,2] > PredictInt[x, 2]) {
if (dfPredict[x,2] < PredictInt[x, 3]) {
return(1)
} # response in CI
else {
return(0)
} # response not in CI
}
else{
return(1)
} # response not in CI
}
Matches <- c(sapply(seq_len(nrow(dfPredict)), my_fun))
dfPredict['Lower'] <- c(PredictInt[,2])
dfPredict['Upper'] <- c(PredictInt[,3])
dfPredict['Matches'] <- Matches
dfPredict
str <- paste0("Total observations correctly predicted: ", nrow(dfPredict %>% filter(Matches == 1)))
str
install.packages("tinytex")
